         +---------------------------+
         |    ユーザーのブラウザ     |
         |  (Reactアプリケーション)  |
         +-----------+---------------+
                     │
             HTTPリクエスト/レスポンス
                     │
         +-----------v---------------+
         |    Node.jsサーバー        |
         |   (Expressフレームワーク) |
         +-----------+---------------+
                     │
           読み書き（JSONファイル）
                     │
         +-----------v---------------+
         |  データストレージ (JSON)  |
         +---------------------------+

【フロントエンド（クライアント側）】
使用技術:

React: ユーザーに見える画面を作るためのJavaScriptライブラリです。

React Router: ページ間の移動（ルーティング）を管理します。

Chart.js / React-Chartjs-2: データをグラフやチャートとして表示するために使用します。

役割:
ユーザーが実際に操作する画面を提供し、見た目や操作性（UI/UX）を実現します。

【バックエンド（サーバー側）】
使用技術:

Node.js: サーバー側のJavaScript実行環境です。

Express: HTTPリクエスト（ユーザーからの要求）を処理するためのフレームワークです。

body-parser: リクエストボディ（送られてくるデータ）の解析に使用します。

cors: 他のドメインからのリクエストを許可するための仕組みです。

bcrypt: ユーザーのパスワードを安全に扱うため、ハッシュ化（暗号化）に利用されます。

役割:
ユーザーのログイン処理、アカウント管理、各種ログの記録など、サーバー側での処理やデータ管理を行います。

開発支援ツール:

Nodemon: サーバー側のコードに変更があると自動で再起動してくれるツールで、開発中の効率を上げます。

【データストレージ】
使用技術:

JSONファイル: データベースの代わりに、ユーザー情報やログ情報を保存するために使われています。

役割:
データベースサーバーを使用せず、シンプルにファイルシステム上のJSONファイルに情報を保存・読み込みしています。